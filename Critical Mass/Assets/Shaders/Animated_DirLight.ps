#version 330

out vec4 vFragColor;

uniform vec4 vColor;
uniform vec3 vLightDirection;
uniform float ambientIntensity;
uniform float diffuseIntensity;
uniform sampler2D textureUnit0;
//uniform sampler2D textureUnit1;
//uniform sampler2D textureUnit2;

varying vec2 vTex;

smooth in vec3 vVaryingNormal;

void main( void )
{
	float diff = max( 0.0f, dot( normalize( vVaryingNormal ), normalize( vLightDirection ) ) );
	
	vec4 tex = texture2D( textureUnit0, vTex );
	vec4 vDiffuseColor = vColor * diff * diffuseIntensity * tex;
	vec4 vAmbientColor = vColor * ambientIntensity * tex;
	vFragColor = vDiffuseColor + vAmbientColor;
	
	//vec3 vReflection = normalize( reflect( -normalize( vLightDirection ), normalize( vVaryingNormal ) ) );
	//float spec = max( 0.0f, dot( normalize( vVaryingNormal ), vReflection ) );
	
	//if( diff != 0 )
	//{
	//	float fSpec = pow( spec, 128.0f );
	//	vec4 specSample = texture2D( textureUnit1, vTex );
	//	specSample = specSample * vColor * fSpec;
	//	vFragColor.rgb += specSample.rgb;
	//}
	
	//vFragColor.a *= vColor.a;
}
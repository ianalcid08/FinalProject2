// Deferred point light pixel shader
// Compile with screenSpaceQuad.vs
#version 130

uniform sampler2D diffuseTexture;
uniform sampler2DShadow depthTexture;
uniform sampler2D positionTexture;
uniform sampler2D normalTexture;
uniform mat4 cameraMatrix;
uniform vec3 lightPositions[100];
uniform int numLights;

varying vec2 vTex;

void main( void )
{
	vec4 color = texture2D( diffuseTexture, vTex );
	vec3 normal = texture2D( normalTexture, vTex ).rgb * 2.0 - 1.0;
	vec4 position = texture2D( positionTexture, vTex);
	gl_FragDepth = shadow2D( depthTexture, vec3( vTex, 1.0f ) ).x;
	
	if( gl_FragDepth == 1.0 )
		discard;
	
	gl_FragColor = vec4( color.rgb * 0.15, 1.0 );
	
	vec3 dirLightDirection = normalize( vec3( -1.0, 1.0, 0.5 ) );
	float dirNdotL = dot( normal, dirLightDirection );
	vec3 dirDiffuse = vec3( clamp( dirNdotL, 0.0, 1.0 ) );
	gl_FragColor.rgb += dirDiffuse;
	
	for( int i = 0; i < numLights; ++i )
	{
		vec3 light = vec3( 0.0 );
		vec4 lightPos4 = /*cameraMatrix * */vec4( lightPositions[i], 1.0f );
		vec3 lightPos3 = lightPos4.xyz;
		
		vec3 lightDirection = lightPos3 - position.xyz;
		
		float lightDistance = length( lightDirection );
		lightDirection = lightDirection / lightDistance;
		
		float lightDistanceSquared = lightDistance * lightDistance;

		float NdotL = dot( normal, -lightDirection );
		float intensity = clamp( NdotL, 0.0, 1.0 );
		
		//vec3 diffuse = intensity * color.rgb * /*diffuse power*/500.0 / lightDistanceSquared;
		
		/*
			1 - distance / range = linear falloff
			
			00	01	02	03
			10	11	12	13
			20	21	22	23
			30	31	32	33
		*/
		
		float attenuation = clamp( 1.0 - lightDistance / 25.0, 0.0, 1.0 );
		vec3 diffuse = intensity * attenuation * vec3( 1.0, 0.9, 0.6 );
		vec3 toEye = normalize( vec3( cameraMatrix[0][3], cameraMatrix[1][3], cameraMatrix[2][3] ) - position.xyz );
		vec3 H = normalize( lightDirection + toEye );
		float NdotH = dot( normal, H );
		
		intensity = pow( clamp( NdotH, 0.0, 1.0 ), 128.0 );
		
		vec3 specular = intensity * /*yellowish light*/vec3( 1.0, 1.0, 0.8 ) */*specular power*/100.0 / lightDistanceSquared;
		clamp( specular, 0.0, 1.0 );
		
		light = diffuse + specular;
		
		gl_FragColor.rgb += light;
	}
	
	gl_FragColor.r = clamp( gl_FragColor.r, 0.0, color.r );
	gl_FragColor.g = clamp( gl_FragColor.g, 0.0, color.g );
	gl_FragColor.b = clamp( gl_FragColor.b, 0.0, color.b );
}
// Untextured directional light pixel shader
#version 130

out vec4 vFragColor;

uniform vec4 vColor;
uniform vec3 vLightDirection;
uniform float ambientIntensity;
uniform float diffuseIntensity;

smooth in vec3 vVaryingNormal;

void main( void )
{
	float diff = max( 0.0f, dot( normalize( vVaryingNormal ), normalize( vLightDirection ) ) );
	
	vec4 vDiffuseColor = diff * vColor * diffuseIntensity;
	vec4 vAmbientColor = vColor * ambientIntensity;
	vFragColor = vDiffuseColor + vAmbientColor;
	
	vec3 vReflection = normalize( reflect( -normalize( vLightDirection ), normalize( vVaryingNormal ) ) );
	float spec = max( 0.0f, dot( normalize( vVaryingNormal ), vReflection ) );
	
	if( diff != 0 )
	{
		float fSpec = pow( spec, 128.0f );
		vFragColor.rgb += vec3(fSpec, fSpec, fSpec);
	}
}